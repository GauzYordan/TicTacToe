<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables

//Decides which game to play
var vplayer, vcell;

if (global.game == 1) {
    cgrid = 3;
    vplayer = false;
    vcell = 120;
    scale = 1;
} else {
    cgrid = 4;
    vplayer = 0;
    vcell = 90;
    scale = .75
}

grid = ds_grid_create(cgrid, cgrid);
ds_grid_clear(grid, NOTHING);
player = vplayer;
cell = vcell;
game_over = false;
winner = noone;  //this means there is no winner
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//room_restart();
room_goto(rm_menu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for clicks

var xx, yy, in_grid;
xx = mouse_x div cell;
yy = (mouse_y - cell) div cell;
in_grid = false;

if (game_over == false) {
//This condition prevents the game from creating a char below the grid
    if (xx &lt; cgrid) {
        if (grid[# xx, yy] == NOTHING) {
            grid[# xx, yy] = player;
            scr_check_winner();
            /*The next code analizes which game is being played and gives the next
            turn to the respective player*/
            if (global.game == 1) {
                player = !player;
            } else {
                if (player == 2) {player = -1;}
                player++
            }   
        }
    }
}

/*if (game_over == false) {
    if (global.game == 1 || xx &lt; 4) {    //the xx condition prevents the game from 
        if (grid[# xx, yy] == NOTHING) { //creating a char below the 4x4 grid
            grid[# xx, yy] = player;
            scr_check_winner();
            The next code analizes which game is being played and gives the next
            turn to the respective player
            if (global.game == 1) {
                player = !player;
            } else {
                if (player == 2) {player = -1;}
                player++
            }   
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the Chars
for (var row=0; row&lt;ds_grid_width(grid); row++) {
    for (var col=0; col&lt;ds_grid_height(grid); col++) {
        if (grid[# row, col] == NOTHING) continue;
        
        var subimage = grid[# row, col];
        draw_sprite_ext(spr_char, subimage, row*cell, (col*cell)+cell, scale, scale, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Info of the game

var widht, turn;

width = room_width;

if (player == false || player == 0 ) turn = "Circle";
else if (player == true || player == 1) turn = "Cross";
else turn = "Triangle"

draw_set_font(fnt_crux);
draw_set_alpha(1);
draw_set_color(c_black);

draw_set_halign(fa_left);
draw_text(2, 5, "Player 1#Circle");

draw_set_halign(fa_right);
draw_text(width-2, 5, "Player 2#Cross");

draw_set_halign(fa_middle);
draw_text(width/2, 5, "Player 3#Triangle");

draw_set_font(fnt_turn);
draw_text(width/2, 45, "Turn: "+turn);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Winner screen

var width = room_width;
/*draw_set_font(fnt_turn);
draw_set_alpha(1);
draw_set_color(c_black);
draw_set_halign(fa_middle);*/

if (game_over) {
    switch(winner) {
        case NOTHING:
            draw_text(width/2, cell/2 + 20, "IT'S A TIE!"); 
            break;
        case CIRCLE: 
            draw_text(width/2, cell/2 + 20, "PLAYER 1 WINS!"); 
            break;
        case CROSS: 
            draw_text(width/2, cell/2 + 20, "PLAYER 2 WINS!"); 
            break;
        case TRIANGLE:
            draw_text(width/2, cell/2 + 20, "PLAYER 3 WINS!"); 
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
